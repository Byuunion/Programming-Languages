-- Read the work assignments
-- Store in a 2-dimensional array
with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

procedure adaHW is              -- Main

   type Array_Type is array (1 .. 4, 1 .. 4) of Character;
   
   type Super_Array is array (1..16) of Character;
   Num_Employees: Integer;
   Dummy: Character;
   Work_Schedule: Array_Type;
   Count: Integer := 1;
   Big_Array: Super_Array;
   Good_Shift: boolean := true;
   J: Integer := 0;
   
   type Employee is record
	Person: Character;
	Phone: Integer;
	Computer: Integer;
	Network: Integer;
   end record;
	
   Abilities : array(1..26) of Employee;
   
begin
     
   for Shift in 1..4 loop
	for Job in 1..3 loop
		Get(Work_Schedule(Shift, Job));
		Get(Dummy);	-- Read the space
	end loop;
	Get(Work_Schedule(Shift, 4));
	Skip_Line;	-- Skip past the newline
   end loop;
   
   put("Shift Schedule");
   New_Line;
    for Shift in 1..4 loop
	for Job in 1..4 loop
		put(Work_Schedule(Shift, Job));
		put(" ");	
	end loop;
	New_Line;	-- Skip past the newline
   end loop;
   
   -- Read the employees' skills
   -- Store in an array of records
   
   Get(Num_Employees);
   Skip_Line;
      for Employee in 1..Num_Employees loop
          Get(Abilities(Employee).Person);	-- character
          Get(Abilities(Employee).Phone);		-- integer
          Get(Abilities(Employee).Computer);	-- integer
          Get(Abilities(Employee).Network);	-- integer
         Skip_Line;	-- Prepare to read next name as character
      end loop;
   
   put("Number of Employees:");
   put(Num_Employees);
   New_Line;
   put("Employee Stats:");
   New_Line;
      for Employee in 1..Num_Employees loop
          put(Abilities(Employee).Person);	-- character
          put(Abilities(Employee).Phone);		-- integer
          put(Abilities(Employee).Computer);	-- integer
          put(Abilities(Employee).Network);	-- integer
         New_Line;	-- Prepare to read next name as character
   end loop;
   
   -- Populates a 1D array for duplicate checking
   for Shift in 1..4 loop
	for Job in 1..4 loop
		Big_Array(count) := (Work_Schedule(Shift, Job));
		count:= count + 1;
	end loop;
   end loop;
   
   -- Detects duplicates in the shifts
   for I in 1..15 loop
       J := I + 1;
       for K in J..16 loop
          if (Big_Array(I) = Big_Array(K)) then
            Good_Shift := false;
          end if;
       end loop;
   end loop;
   
   --Check for shift qualification
   for row in 1 .. 4 loop
   		for col in 1 .. 4 loop
   			for Employee in 1 .. Num_Employees loop
	   			if Work_Schedule(row, col) = Abilities(Employee).Person then
	   			
	   				if col = 1 or else col = 2 then
	   					if Abilities(Employee).Phone /= 1 then
	   						Good_Shift := False;
	   				   	end if;	
			   		end if;		
			   		
					if col = 3 then
						if Abilities(Employee).Computer /= 1 then
	   						Good_Shift := False;
	   					end if;
   					end if;
   					
					if col = 4 then 
						if Abilities(Employee).Network /= 1 then
	   						Good_Shift := False;
	   					end if;
					end if;
					
				end if;
			end loop;
		end loop;
   end loop;
         
   if(Good_Shift) then
      put("Acceptable");
      
      else
      put("Not Acceptable");
   end if;
      
         
end adaHW;