(define (merge_list multi_list)
	;Takes in an array of list and mergers it into a larger list via recursion
	;Returns a single big list
	(append (car multi_list) (cadr multi_list) (caddr multi_list) (cadddr multi_list)))

(define (duplicates? list)
	;Takes in the single list from merge_lists and checks for duplicates
	;Returns true if duplicate detected
	;Returns false if no duplicates
	(cond((null? (cdr list)) #F)
		 ((list? (member (car list) (cdr list))) #T)
		 (else (duplicates? (cdr list)))))
		 
(define (good_shift? shift_list employee_list)
	;checks to see if a shift is good
	;Returns true if the shift is satisfied
	;Returns false otherwise
	
		 ;last row +1 checker
	(cond((null? shift_list) #T)
		 ((equal? (can_phone?(employee_info(caar shift_list) employee_list)) #F) #F)
		 ((equal? (can_phone?(employee_info(cadar shift_list) employee_list)) #F) #F)
		 ((equal? (can_comprepair?(employee_info(caddar shift_list) employee_list)) #F) #F)
		 ((equal? (can_netrepair?(employee_info(car(cdddar shift_list)) employee_list)) #F) #F)
		 
		 ;Go to the next row
		 (else (good_shift? (cdr shift_list) employee_list))))
		  
(define (employee_info name employee_list)
	;Takes in an employee name and the whole employee list
	;Returns the specified employee's stats
	;Returns a null list if unable to find
	
	(cond((null? employee_list) '())
		 ((eqv? name (caar employee_list)) (car employee_list))
		 (else (employee_info name (cdr employee_list)))))

(define (can_phone? list)
	;Takes in an employee info list
	;Returns true if the employee can use the phone
	(cond((=(cadr list) 1) #T)
		 (else #F)))
	
(define (can_comprepair? list)
	;Returns true if the employee can repair computers
	(cond((=(caddr list) 1) #T)
		 (else #F)))
	
(define (can_netrepair? list)
	;Returns true if the employee can repair the network
	(cond((=(cadddr list) 1) #T)
		 (else #F)))
	
(define (jobs_ok? x y)
	(cond((equal? (duplicates? (merge_list x)) #T) #F)
		 ((equal? (good_shift? x y) #F) #F)
		 (else #T)))
  
(jobs_ok?
	'(
	(Park Dunbar Knox Lloyd)
	(Brown Trivedi Ramos Franklin)
	(Schmidt Nakamura Adams Chen)
	(Evans Goldberg Macmillan Quincy))
	'(
	(Adams 1 1 1)
	(Brown 1 1 1)
	(Chen 1 1 1)
	(Dunbar 1 1 1)
	(Evans 1 1 1)
	(Franklin 1 1 1)
	(Goldberg 1 1 1)
	(Jefferson 1 1 1)
	(Knox 1 1 1)
	(Lloyd 1 1 1)
	(Macmillan 1 1 1)
	(Nakamura 1 1 1)
	(Park 1 1 1)
	(Quincy 1 1 1)
	(Ramos 1 1 1)
	(Schmidt 1 1 1)
	(Trivedi 1 1 1)))

(jobs_ok?
   '(
	(Young Collins Baker Liu)
	(Davis Ericson Kelly Smith)
	(Fitzgerald Green Martinez Tortorella)
	(Hughes Jones Patel Zimmerman))
   '(
	(Andrews 1 0 0)
	(Baker 0 1 1)
	(Collins 1 1 1)
	(Davis 1 0 0)
	(Ericson 1 0 0)
	(Fitzgerald 1 0 1)
	(Green 1 0 1)
	(Hughes 1 0 0)
	(Jones 1 1 1)
	(Kelly 0 1 1)
	(Liu 1 0 1)
	(Martinez 0 1 1)
	(Patel 1 1 1)
	(Rodriguez 1 0 0)
	(Smith 0 1 1)
	(Tortorella 0 0 1)
	(Williams 1 0 0)
	(Underwood 0 1 0)
	(Young 0 1 0)
	(Zimmerman 1 1 1)))